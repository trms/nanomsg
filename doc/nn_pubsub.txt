nn_pubsub(7)
============

NAME
----
nn_pubsub - publish/subscribe scalability protocol


SYNOPSIS
--------
*#include <nanomsg/nn.h>*

*#include <nanomsg/pubsub.h>*


DESCRIPTION
-----------
Broadcasts messages to multiple destinations.

Messages sent from NN_PUB sockets will only be received by NN_SUB sockets that
have subscribed to the matching 'topic'. The NN_SUB socket will determine a
comparing the subscribed topics (using NN_SUB_SUBSCRIBE on a full SUB socket)
to the bytes in the incomming message, up to the first NULL (\0) character.

The empty string is allowed, meaning that a subscription of:

---
nn_setsockopt(s, NN_SUB, NN_SUB_SUBSCRIBE, "", (size_t) 1 ); //the NULL is needed
---

Will match a message containing "\0Hello, World!"

The entire message, including the the topic string and the following NULL
is included in the message. 

Socket Types
~~~~~~~~~~~~

NN_PUB::
    This socket is used to distribute messages to multiple destinations.
    Receive operation is not defined.
NN_SUB::
    Receives messages from the publisher. Only messages that the socket is
    subscribed to are received. When the socket is created there are no
    subscriptions and thus no messages will be received. Send operation is
    not defined on this socket.

Socket Options
~~~~~~~~~~~~~~

NN_SUB_SUBSCRIBE::
    Defined on full SUB socket. Subscribes for a particular topic. Type of the
    option is string. A single NN_SUB socket can handle multiple subscriptions.
NN_SUB_UNSUBSCRIBE::
    Defined on full SUB socket. Unsubscribes from a particular topic. Type of
    the option is string.

EXAMPLE
~~~~~~~

----
int pub = nn_socket (AF_SP, NN_PUB);
int sub = nn_socket (AF_SP, NN_SUB);
int nbytes;
void *buf = NULL;

nn_setsockopt(sub, NN_SUB, NN_SUB_SUBSCRIBE, "", 1 );
nn_setsockopt(sub, NN_SUB, NN_SUB_SUBSCRIBE, "foo",4);

nbytes = nn_send(pub, "foo\0Hello!", 10);
assert(nbytes == 10);
nbytes = nn_recv(sub, &buf, NN_MSG, 0);
assert(nbytes == 10);
nn_freemsg(buf);

nbytes = nn_send(pub, "\0World!", 7);
assert(nbytes ==7);
nbytes = nn_recv(sub, &buf, NN_MSG, 0);
assert(nbytes == 7);
nn_freemsg(buf);
----


SEE ALSO
--------
linknanomsg:nn_bus[7]
linknanomsg:nn_reqrep[7]
linknanomsg:nn_pipeline[7]
linknanomsg:nn_survey[7]
linknanomsg:nn_pair[7]
linknanomsg:nanomsg[7]

AUTHORS
-------
Martin Sustrik <sustrik@250bpm.com>

